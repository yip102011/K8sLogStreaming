@page "/LogStream/{Namespace?}/{KubeKind?}/{MetaName?}"
@model K8sLogStreaming.Pages.LogStreamModel
@{
    ViewData["Title"] = $"K8S Logs - {Model.Namespace} - {Model.KubeKind} - {Model.MetaName}";
}

<div>
    <pre class="logs_container"></pre>
</div>

@section Scripts{
<style>
    main.pb-3 {
        padding-bottom: 0 !important;
    }

    body > .container {
        max-width: none;
    }

    .logs_container {
        /* 57px is height of header */
        height: calc(100vh - 57px - 17px);
        margin: 0px;
    }
</style>
<script asp-append-version="true" src="~/js/signalr/dist/browser/signalr.js"></script>
<script>
    (function () {
        "use strict";

        var hubUrl = "@SignalRChat.Hubs.LogStreamHub.HUB_URL";
        var k8sNamespace = "@Model.Namespace";

        var podNameListString = "@(string.Join(',',Model.PodNameList))";
        var podNameList = podNameListString.split(',');

        var config = {
            sinceSeconds: 300,
            isFollow: true
        };

        var connection = new signalR.HubConnectionBuilder().withUrl(hubUrl, { transport: signalR.HttpTransportType.WebSockets }).build();

        connection.start().then(function () {
            podNameList.forEach(podName => { registerForStreamNotifications(k8sNamespace, podName); });
        }).catch(function (err) {
            return console.error(err.toString());
        });

        function registerForStreamNotifications(k8sNamespace, podName) {
            var subscription = connection.stream("GetPodLog", k8sNamespace, podName, config.sinceSeconds).subscribe({
                next: (content) => {
                    var logContainer = $('.logs_container');
                    logContainer.append(content);
                    if(config.isFollow){
                        logContainer.scrollTop(logContainer[0].scrollHeight);
                    }
                }
            });
        }
    })();
</script>
}
