@page "/"
@{
    ViewData["Title"] = $"{Request.Query["KubeNamespace"]} | {Request.Query["MetaName"]}";
    Layout = "_Layout";
}

<div>
    <div id="header" class="flex align-content-center flex-wrap">
        <h1 class="flex align-items-center">@ViewData["Title"]</h1>
        <span class="flex align-items-center ml-auto">Auto Scroll<p-inputswitch class="ml-2" v-model="autoScroll"></p-inputswitch></span>
        <span class="flex align-items-center ml-2 p-input-icon-left">
            <i class="pi pi-search"></i>
            <p-inputtext v-model="searchingStr" placeholder="Log Search"></p-inputtext>
        </span>
    </div>

    <p-scrollpanel id="logs_container" style="height: calc(100vh - 45px - 5px - 4px)">
        <pre class="logs_line_container" v-for="(log, index) in searchedLogs">{{log.time}} | {{log.message}}</pre>
    </p-scrollpanel>
</div>

@section Scripts{
<style>
    #header {
        border-bottom: 2px grey solid;
    }

        #header h1 {
            margin: unset;
            height: 45px;
        }

    #logs_container {
        margin-top: 0px;
        margin-bottom: 5px;
        margin-left: 5px;
        margin-right: 5px;
        overflow: hidden;
        scroll-behavior: smooth;
    }

        #logs_container .logs_line_container {
            margin: unset;
        }

        #logs_container .p-scrollpanel-content {
            padding-bottom: unset;
        }

        #logs_container.p-scrollpanel .p-scrollpanel-wrapper {
            border-right: 9px solid var(--surface-border);
        }

        #logs_container.p-scrollpanel .p-scrollpanel-bar {
            background-color: var(--primary-color);
            opacity: 1;
            transition: background-color .2s;
        }

            #logs_container.p-scrollpanel .p-scrollpanel-bar:hover {
                background-color: #007ad9;
            }
</style>
<script src="https://unpkg.com/primevue@3.11.1/togglebutton/togglebutton.min.js"></script>
<script src="https://unpkg.com/primevue@3.11.1/inputswitch/inputswitch.min.js"></script>
<script src="https://unpkg.com/primevue@3.11.1/scrollpanel/scrollpanel.min.js"></script>
<script src="https://unpkg.com/%40microsoft/signalr@6.0.2/dist/browser/signalr.min.js"></script>
<script>
    class LogSteamService {
        constructor(logs, autoScroll) {
            const hubUrl = "@SignalRChat.Hubs.LogStreamHub.HUB_URL";

            this.tailLines = 200;

            this.logs = logs;
            this.autoScroll = autoScroll;

            this.connection = new signalR.HubConnectionBuilder()
                .withUrl(hubUrl, { transport: signalR.HttpTransportType.WebSockets })
                .withAutomaticReconnect()
                .configureLogging(signalR.LogLevel.Information)
                .build();

            this.start();
        }

        async start() {
            try {
                var connectStart = this.connection.start();
                var podList = await this.fetchPodList();

                await connectStart;
                console.log("SignalR Connected.");
                for (let pod of podList) {
                    this.registerForLogStream(pod.kubeNamespace, pod.metaName);
                }
            } catch (err) {
                console.log(err);
                setTimeout(() => this.start(), 5000);
            }
        }

        async fetchPodList() {
            var response = await fetch("api/kube/pod/list" + window.location.search);
            var podList = await response.json();
            return podList;
        }

        registerForLogStream(kubeNamespace, podName) {
            var subscription = this.connection.stream("GetPodLog", kubeNamespace, podName, this.tailLines).subscribe({
                next: (content) => {
                    this.addLog(content);
                    if (this.autoScroll.value) { this.scrollLogToBottom(); }
                }
            });
        }

        scrollLogToBottom() {
            var element = document.querySelector("#logs_container .p-scrollpanel-content");
            setTimeout(() => element.scrollTop = element.scrollHeight, 100)
        }

        addLog(content) {
            var datetime = content.substring(0, 30);
            var time = content.substring(11, 19);
            var msg = content.substring(31, content.length);

            var logs = this.logs.value;
            logs.push({ datetime: datetime, time: time, message: msg });

            if (this.logs.value.length > 1000) {
                this.logs.value.shift();
            }
        }
    }
</script>
<script>

    const { createApp, ref, onMounted, watch, onUpdated, computed } = Vue;
    const { FilterMatchMode, FilterOperator } = primevue.api;
    const Tooltip = primevue.tooltip;

    const App = {
        setup() {
            const autoScroll = ref(true);
            const logs = ref([]);
            const logService = new LogSteamService(logs, autoScroll);

            const searchingStr = ref("");
            const searchedLogs = computed(() => {
                return logs.value
                            .filter((log) => log.message.includes(searchingStr.value))
                            .sort(function(a, b) {  return a.datetime - b.datetime;});
            });

            const menuItems = ref(null);
            fetch('api/menu').then(res => res.json()).then(data => menuItems.value = data);

            return { menuItems, logs, searchingStr, searchedLogs, autoScroll };
        },
        components: {
            "p-splitter": primevue.splitter,
            "p-splitterpanel": primevue.splitterpanel,
            "p-sidebar": primevue.sidebar,
            "p-menu": primevue.menu,
            "p-dropdown": primevue.dropdown,
            "p-skeleton": primevue.skeleton,

            "p-scrollpanel": primevue.scrollpanel,

            "p-inputtext": primevue.inputtext,
            "p-inputswitch": primevue.inputswitch,
            "p-tristatecheckbox": primevue.tristatecheckbox,
        },
    };

    const routes = [{ path: "/", component: App }];

    const router = VueRouter.createRouter({ history: VueRouter.createWebHistory(), routes });

    var myapp = createApp(App).use(router).use(primevue.config.default).mount("#app");
</script>
}